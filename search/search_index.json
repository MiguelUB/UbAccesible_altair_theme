{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#overview","title":"Overview","text":"<p>This library is all about giving resources for vega-altair aiming to create better and more accessible graphs, the library was built investigating both vega-altair and vega-lite API.</p> <p>It offers resources for programmers such as tools to create new vega-altair themes, built-in accessible themes, description generators(Powered by BrailleR).</p> <p>For the user offers limited customization of the graph like select the color scheme, change text size, change graph size</p> <p>The idea behind the library is that like in vega-altair most of the configurations and details to create the graph are handle by the library, giving you more time to spend in the data. The library itself doesn't alter any concept, function or API of vega-altair just add more tools for you to use.</p> <p>This documentation serve for reference of the resources given after the installation and to help understand more about what makes a graph accessible.</p>"},{"location":"#installation","title":"Installation","text":"<p>The library and its dependencies can be easy installed, using:</p> <pre><code>pip install accessible-theme\n</code></pre> <p>After installation the next built-in themes shoud be ready to use:</p> <ul> <li>accessible_theme</li> <li>dark_accessible_theme</li> <li>protonopia_theme</li> <li>tritanopia_theme</li> <li>deuteranopia_theme</li> </ul> <p>You can enable them, using:</p> <pre><code>import altair as alt\n\nalt.themes.enable(\"accessible_theme\")\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p>The library was built for: - altair==5. - - typing-extensions&gt;=4.0, &lt;5 - jinja2==3.  - pyRserve==1.0.*</p> <p>Also in order to use the generate_description() function is imperative to have R running in the background, and make R have the libraries ggplpot and pyRserve running</p>"},{"location":"#getting-help","title":"Getting Help","text":"<p>You can browse this documentation via the links in the top navigation panel or by viewing the API page.  In addition to reading this documentation page, it can be helpful to also browse the source code of this project.</p> <p>The code source is avaible in Github where you can report any bugs or request features.</p>"},{"location":"#resources","title":"Resources","text":""},{"location":"#project-philosofy","title":"Project Philosofy","text":"<p>This project has the same approach as the vega-altair library that is a simple user interface  which focuses most of the resources in a experience ready to use after installation, but with the posibility to still  be abel to create something more complex and complete.</p>"},{"location":"p1-api/","title":"Api","text":""},{"location":"p1-api/#models","title":"Models","text":""},{"location":"p1-api/#themes","title":"Themes","text":""},{"location":"p1-api/#accessible_theme","title":"accessible_theme","text":""},{"location":"p1-api/#dark_accessible_theme","title":"dark_accessible_theme","text":""},{"location":"p1-api/#protonopia_theme","title":"protonopia_theme","text":""},{"location":"p1-api/#tritanopia_theme","title":"tritanopia_theme","text":""},{"location":"p1-api/#deuteranopia_theme","title":"deuteranopia_theme","text":""},{"location":"p1-api/#top-level-functions","title":"Top-Level Functions","text":""},{"location":"p1-api/#create_accesible_scheme","title":"create_accesible_scheme","text":""},{"location":"p1-api/#generate_description","title":"generate_description","text":""},{"location":"p1-api/#tokens","title":"Tokens","text":""},{"location":"p1-api/#types","title":"Types","text":""},{"location":"p2-examples/","title":"Examples","text":""},{"location":"p2-examples/#enabling-a-theme","title":"Enabling a theme","text":"<p>Enabling the themes that comes with this library is as easy to just enabling them with altair, then you can create  your chart as you want the avaible themes in this library are: - accessible_theme - dark_accessible_theme - protonopia_theme - tritanopia_theme - deuteranopia_theme</p> <pre><code>import altair as alt\nimport pandas as pd\n\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre>"},{"location":"p2-examples/#customizing-a-built-in-theme","title":"Customizing a built-in theme","text":"<p>Each theme comes from a Theme Model defined in this library, so you only need to instance the model and call to the functions defined to make little customizations to the theme, like this where we change the background color: <pre><code>import altair as alt\n\n# Changing background color of the accessible_theme\naccesible_theme= ThemeAccesible()\naccesible_theme.change_background_color('#ffca6f')\n\nalt.themes.enable('accessible_theme')\n\nsource = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(source).mark_bar().encode(\n    x='a',\n    y='b'\n)\n</code></pre></p>"},{"location":"p2-examples/#creating-a-new-theme","title":"Creating a new theme","text":""},{"location":"p2-examples/#vega-altair-way-of-defining-a-theme","title":"Vega-altair way of defining a theme","text":"<p>Creating a new theme is a built-in function in vega-altair all that is need it is a funtion that return a dict object  with the appropriate keys and values defined in vega-lite, then register the theme and finally enabling it</p> <pre><code>import altair as alt\nfrom vega_datasets import data\n\n# define the theme by returning the dictionary of configurations\ndef black_marks():\n    return {\n        'config': {\n            'view': {\n                'height': 300,\n                'width': 300,\n            },\n            'mark': {\n                'color': 'black',\n                'fill': 'black'\n            }\n        }\n    }\n\n# register the custom theme under a chosen name\nalt.themes.register('black_marks', black_marks)\n\n# enable the newly registered theme\nalt.themes.enable('black_marks')\n\n# draw the chart\ncars = data.cars.url\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre>"},{"location":"p2-examples/#acceessilbe-theme-way-of-defining-a-theme","title":"Acceessilbe-theme way of defining a theme","text":"<p>However, in this library we use a more direct and organized method, in this library there are several models defined  that correspond to what the vega-lite API expects. A simple example would be like this <pre><code>import altair as alt\nfrom vega_datasets import data\n\n# Create new dictionary with the configurations for the axis\naxis_config = AxisModel(labelColor='#e7212f', titleColor='#e7212f').create_axis()\n\n# Create a new dictionary of configurations\nred_text_axis= ConfigModel(axis=axis_config).create_config()\n\n# Define the theme by return the dictionary with the configurations\ndef red_axis_theme():\n    return red_text_axis\n\n\n# register the custom theme under a chosen name\nalt.themes.register('red_axis_theme', red_axis_theme)\n\n# enable the newly registered theme\nalt.themes.enable('red_axis_theme')\n\n# draw the chart\ncars = data.cars.url\nalt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\n</code></pre> Check the API page for more information about the avaible models</p>"},{"location":"p2-examples/#creating-an-accessible-chart-for-the-user","title":"Creating an accessible chart for the user","text":"<p>The library comes with a function that uses jinja2 and a custom template where is expected the chart to render. This function will use chart to create a new HTML with options for the user to custom the graph</p> <pre><code>import altair as alt\nfrom vega_datasets import data\n\ncars = data.cars.url\nbase = alt.Chart(cars).mark_point().encode(\n    x='Horsepower:Q',\n    y='Miles_per_Gallon:Q'\n)\ncreate_accesible_scheme(base,'nameOfHtml','Textual description of the graph')\n</code></pre>"},{"location":"p2-examples/#generate-description-of-a-graph","title":"Generate description of a graph","text":""},{"location":"p3-release_notes/","title":"Release Notes","text":""},{"location":"p3-release_notes/#version-01-released-dic-302023","title":"Version 0.1 (released Dic 30,2023)","text":"<ul> <li>Initial release of accessible-theme for vega-altair</li> </ul>"},{"location":"p4-about/","title":"About","text":""},{"location":"p4-about/#roadmap","title":"Roadmap","text":""},{"location":"p4-about/#first-approach","title":"First approach","text":"<p>When starting this project, the first idea that crossed our minds was to create a completely separate branch of vega-altair where we could configure the internal files of the library. While this may seem like the logical thing to do, it is a monumental and unrealistic job for a small team.</p> <p>The second and more realistic idea was to be able to create a theme that had accessible parameters to be able to visualize and improve the graphics rendered by vega, however this was limited to returning a dictionary type object in a function.</p>"},{"location":"p4-about/#understanding-limitations","title":"Understanding limitations","text":"<p>The two most important limitations that we imposed on ourselves was to be able to have a library that did not alter the workflow of altair or projects built with altair, the second was to be able to provide tools so that programmers can expand the available tools to work with altair.</p> <p>One big limitation is that the usual way to save charts in HTML in altair is using the canvas tag, although this tag has nothing wrong with it, it is more limited than the svg tag since the latter is used for example by HighCharts to be able to give more customization to your graphs by providing fill patterns, custom javascript, description for each element in the graph, etc. All this only because unlike canvas tag the svg tag has childs for every element while the canvas is only one tag.</p> <p>Another limitation we found is that because we try not to touch anything from the vega-altair source code and since we cannot touch the vega-lite source code either, our library must adapt to both and use the tools that both provide. With this in mind, ideas such as using fill patterns, giving graphics sounds, among others were also discarded.</p>"},{"location":"p4-about/#the-final-approach","title":"The final approach","text":"<p>So with that in mind we make one step further, taking inspiration from the Feedzai theme and also applying more organization when creating a theme.</p> <p>The next step then focused on creating models to store values that the Vega API expects, tokens like color values, font sizes and others and finally typing files to ensure that what the models return to us is what was expected by the API.</p> <p>With all these new ideas is that we created a simple and organized system of models that use correctly can create a simple and robust theme, and with these very same models we create 4 accessible themes that attempt to create graphics more accessible</p>"},{"location":"p4-about/#graphs-for-everyone-and-beyond","title":"Graphs for everyone and beyond","text":"<p>The last thing we thought is that since each person is different and may have different needs or tastes, it was to give them simple options so that they can customize the graph in their own way. From this idea came the create_accesible_scheme() function which It is the same as altair.chart.save('test.hml'), since both create an HTML where the chart is rendered but our function adds options to improve its visualization</p>"},{"location":"p4-about/#style-design-and-inspiration","title":"Style, design and inspiration","text":""},{"location":"p4-about/#color-schemes","title":"Color Schemes","text":"<p>Our biggest inspiration for the color schemes is the color brewer project, vega color schemes and the web Coloring for Colorblindness</p>"},{"location":"p4-about/#vega-api-vega-altair-api","title":"Vega API, Vega-Altair API","text":"<p>All our models are a direct reference to the Vega API although we only took the parameters that we thought were most relevant, but that does not prevent us from adding any other attribute that we have not defined but is present in the Vega API.</p>"},{"location":"p4-about/#inspirations","title":"Inspirations","text":"<p>Our first inspiration for creating this theme was the feedzai-altair-theme their project had many hint and guidelines to use when creating a new theme we like their more refined approach, so we decided to use it as a template for this project</p>"},{"location":"p4-about/#testing","title":"Testing","text":"<p>The testing part was only made with plugins of the chrome store to check the efficiency of the graph when it comes down to visualization, the plugins we use are:</p> <ul> <li>Web disability simulator</li> <li>Funkify</li> <li>Daltonimos Amigavel</li> </ul>"},{"location":"p4-about/#faqs","title":"FAQS","text":""},{"location":"p4-about/#does-this-library-support-layered-repeated-concat-and-facet-charts","title":"Does this library support layered, repeated, concat and facet charts?","text":"<p>While the theme set will have no problems with these kind of charts, the function create_accesible_scheme() does not support this kind of chart specially the options to change the graph size or color scheme</p>"}]}